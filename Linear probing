#include <stdio.h>
#include <stdlib.h>

#define TABLE_SIZE 10

// Hash table structure
struct HashTable {
    int *table;
};

// Function to create a hash table
struct HashTable* createHashTable() {
    struct HashTable *hashTable = (struct HashTable*)malloc(sizeof(struct HashTable));
    hashTable->table = (int*)malloc(TABLE_SIZE * sizeof(int));
    
    // Initialize the table with -1 (indicating empty slots)
    for (int i = 0; i < TABLE_SIZE; i++) {
        hashTable->table[i] = -1;
    }
    
    return hashTable;
}

// Hash function to calculate index
int hash(int key) {
    return key % TABLE_SIZE;
}

// Function to insert a key into the hash table using linear probing
void insert(struct HashTable *hashTable, int key) {
    int index = hash(key);
    
    // Linear probing to find the next available slot
    while (hashTable->table[index] != -1) {
        index = (index + 1) % TABLE_SIZE;  // Move to the next index
    }
    
    hashTable->table[index] = key;  // Insert key at the found empty slot
    printf("Inserted key %d at index %d\n", key, index);
}

// Function to search for a key in the hash table
int search(struct HashTable *hashTable, int key) {
    int index = hash(key);
    
    // Linear probing to search for the key
    while (hashTable->table[index] != -1) {
        if (hashTable->table[index] == key) {
            return index;  // Key found
        }
        index = (index + 1) % TABLE_SIZE;  // Move to the next index
    }
    
    return -1;  // Key not found
}

// Function to delete a key from the hash table
void delete(struct HashTable *hashTable, int key) {
    int index = search(hashTable, key);
    
    if (index == -1) {
        printf("Key %d not found in the hash table.\n", key);
        return;
    }
    
    // Mark the slot as deleted by setting it to -1
    hashTable->table[index] = -1;
    printf("Deleted key %d from index %d\n", key, index);
}

// Function to display the hash table
void display(struct HashTable *hashTable) {
    printf("Hash Table:\n");
    for (int i = 0; i < TABLE_SIZE; i++) {
        if (hashTable->table[i] == -1) {
            printf("Index %d: Empty\n", i);
        } else {
            printf("Index %d: %d\n", i, hashTable->table[i]);
        }
    }
}

int main() {
    struct HashTable *hashTable = createHashTable();
    
    insert(hashTable, 10);
    insert(hashTable, 20);
    insert(hashTable, 30);
    insert(hashTable, 25);
    
    display(hashTable);
    
    int key = 20;
    int index = search(hashTable, key);
    if (index != -1) {
        printf("Key %d found at index %d\n", key, index);
    } else {
        printf("Key %d not found\n", key);
    }

    delete(hashTable, 20);
    display(hashTable);
    
    key = 30;
    index = search(hashTable, key);
    if (index != -1) {
        printf("Key %d found at index %d\n", key, index);
    } else {
        printf("Key %d not found\n", key);
    }

    return 0;
}
