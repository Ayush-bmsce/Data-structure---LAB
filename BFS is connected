#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Queue structure used for BFS
struct Queue {
    int *arr;
    int front, rear;
    int capacity;
};

struct Queue* createQueue(int capacity) {
    struct Queue *queue = (struct Queue*)malloc(sizeof(struct Queue));
    queue->capacity = capacity;
    queue->front = -1;
    queue->rear = -1;
    queue->arr = (int*)malloc(capacity * sizeof(int));
    return queue;
}

bool isEmpty(struct Queue *queue) {
    return queue->front == -1;
}

void enqueue(struct Queue *queue, int value) {
    if (queue->rear == queue->capacity - 1) {
        printf("Queue overflow\n");
        return;
    }
    if (queue->front == -1) {
        queue->front = 0;
    }
    queue->rear++;
    queue->arr[queue->rear] = value;
}

int dequeue(struct Queue *queue) {
    if (isEmpty(queue)) {
        printf("Queue underflow\n");
        return -1;
    }
    int value = queue->arr[queue->front];
    queue->front++;
    if (queue->front > queue->rear) {
        queue->front = queue->rear = -1;
    }
    return value;
}

// Function to perform BFS and check if the graph is connected
bool isConnected(int graph[][5], int n) {
    bool visited[n];
    for (int i = 0; i < n; i++) {
        visited[i] = false;
    }

    // BFS
    struct Queue *queue = createQueue(n);
    enqueue(queue, 0);  // Start BFS from node 0
    visited[0] = true;

    while (!isEmpty(queue)) {
        int node = dequeue(queue);
        
        // Visit all the adjacent nodes
        for (int i = 0; i < n; i++) {
            if (graph[node][i] == 1 && !visited[i]) {
                visited[i] = true;
                enqueue(queue, i);
            }
        }
    }

    // Check if all nodes are visited
    for (int i = 0; i < n; i++) {
        if (!visited[i]) {
            return false;  // Graph is not connected
        }
    }

    return true;  // Graph is connected
}

int main() {
    int n;
    printf("Enter the number of nodes in the graph: ");
    scanf("%d", &n);

    int graph[n][n];
    printf("Enter the adjacency matrix (1 for edge, 0 for no edge):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("Enter value for graph[%d][%d]: ", i, j);
            scanf("%d", &graph[i][j]);
        }
    }

    if (isConnected(graph, n)) {
        printf("The graph is connected.\n");
    } else {
        printf("The graph is not connected.\n");
    }

    return 0;
}
